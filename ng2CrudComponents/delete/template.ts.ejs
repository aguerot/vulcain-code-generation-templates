import { Component, OnInit, AfterViewInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from  '@angular/router';
import { Location } from '@angular/common';
import { <%=currentService.schema%>Service, <%=currentService.schema%> } from 'path to service';

@Component({
    selector: 'app-<%=context.normalize(currentService.schema)%>-<%=currentService.action%>',
    templateUrl: './<%=context.normalize(currentService.schema)%>-<%=currentService.action%>.component.html',
    styleUrls: [
        './<%=context.normalize(currentService.schema)%>-<%=currentService.action%>.component.scss'
    ],
    providers: [
        <%=currentService.schema%>Service
    ]
})
export class <%=currentService.schema%><%=currentService.action%>Component implements OnInit, AfterViewInit, OnDestroy {
    entity: <%=currentService.schema%>;
    sub: any;

    constructor(private service: <%=currentService.schema%>Service, private location: Location, private route: ActivatedRoute) {
        this.entity = new <%=currentService.schema%>();
    }

    ngOnInit() {
        this.sub = this.route.params.subscribe(params => {
            this.id = params['id'];
            this.loadEntity();
        });
    }

    ngAfterViewInit() {

    }

    ngOnDestroy() {
        if (this.sub) {
            this.sub.unsubscribe();
        }
    }

    private loadEntity() {
        this.service.<%=context.normalizeMethod(currentService.verb, 'get')%><<%=currentService.schema%>>(this.id).subscribe(e => {
            this.entity = e;
        });
    }

    delete() {
        this.service.<%=context.normalizeMethod(currentService.verb)%>Entity(this.entity).subscribe(s => {
            this.location.back();
        });
    }

    cancel() {
        this.location.back();
    }
}
